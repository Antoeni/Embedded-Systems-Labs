#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <stdint.h>
#include <stdbool.h>

/* XDC module Headers */
#include <xdc/std.h>
#include <xdc/runtime/System.h>
#include <xdc/runtime/Timestamp.h>
#include <xdc/runtime/Types.h>

/* BIOS module Headers */
#include <ti/sysbios/BIOS.h>
#include <ti/sysbios/knl/Clock.h>
#include <ti/sysbios/knl/Task.h>
#include <ti/sysbios/knl/Semaphore.h>

#include <ti/drivers/Board.h>
#define __MSP432P4XX__
#include <ti/devices/msp432p4xx/driverlib/driverlib.h>


#define BAUD_RATE 1200 // Define the baud rate

#define setPorts P1->SEL0 = P1->SEL0 & ~(BIT3)
#define setGPIO P1->SEL1 = P1->SEL1 & ~(BIT3)
#define setOut P1->DIR = P1->DIR| BIT3
#define setHigh P1->OUT = P1->OUT | BIT3
#define setLow P1->OUT = P1->OUT & ~BIT3
#define DELAY_TIME (3000000/BAUD_RATE)


#define TASKSTACKSIZE   2048

Void clockHandler1(UArg arg);
Void task1(UArg arg0, UArg arg1);
Void task2(UArg arg0, UArg arg1);

Task_Struct task1Struct, task2Struct;
Char task1Stack[TASKSTACKSIZE], task2Stack[TASKSTACKSIZE];

Semaphore_Struct semaStruct;
Semaphore_Handle semaphoreHandle = NULL;

int main()
{
    // Init drivers
    Board_init();

    setPorts;
    setGPIO;
    setOut;
    setHigh;

    srand(time(NULL));      // Set seed for random number generator

    // Construct tasks
    Task_Params taskParams;
    Task_Params_init(&taskParams);
    taskParams.stackSize = TASKSTACKSIZE;

    // Task 1
    taskParams.stack = &task1Stack;
    Task_construct(&task1Struct, (Task_FuncPtr)task1, &taskParams, NULL);

    // Task 2
    //taskParams.stack = &task2Stack;
    //Task_construct(&task2Struct, (Task_FuncPtr)task2, &taskParams, NULL);

    // Construct a semaphore object
    Semaphore_Params semaParams;
    Semaphore_Params_init(&semaParams);                 // Initialize structure with default parameters
    Semaphore_construct(&semaStruct, 0, &semaParams);   // Create an instance of semaphore object
    semaphoreHandle = Semaphore_handle(&semaStruct);

    // Create clock that calls Task_yield() to preempt tasks
    Clock_Params clockParams;
    Clock_Handle myClk0;
    Clock_Params_init(&clockParams);
    clockParams.period = 10;         // 1 Clock tick is 1 ms by default
    clockParams.startFlag = TRUE;    // Start immediately
    myClk0 = Clock_create((Clock_FuncPtr)clockHandler1, 1, &clockParams, NULL);   // 2nd argument must be greater than 0
    if (myClk0 == NULL)
        System_abort("Clock0 create failed");

    BIOS_start();    // Jump to the OS and won't return

    return(0);
}

void send_message(char* msg)
{
    uint32_t bit_ticks = 48000000/BAUD_RATE;
    while(*msg != '\0'){
        setLow;
        uint32_t startTime = Timestamp_get32();
        //Delay 1 bit
        while(Timestamp_get32() - startTime < bit_ticks);

        int i;
        for(i = 0; i < 8; i++){
            if((*msg >> i) & 1){
                setHigh;
            }
            else{
                setLow;
            }
            //Delay 1 bit
            startTime = Timestamp_get32();
            while(Timestamp_get32() - startTime < bit_ticks);
        }
        setHigh;
        //Delay 1 bit
        startTime = Timestamp_get32();
        while(Timestamp_get32() - startTime < bit_ticks);
        msg++;
    }
}
char pressed[] = "S10 ";
char notPressed[] = "S11 ";

Void task1(UArg arg0, UArg arg1)
{
    bool state = false;
    MAP_GPIO_setAsInputPinWithPullUpResistor(GPIO_PORT_P1, GPIO_PIN1);
    while(1){

            if(MAP_GPIO_getInputPinValue(GPIO_PORT_P1, GPIO_PIN1) == 0 && !state){
             send_message(pressed);
             state = true;
            }
            else if(MAP_GPIO_getInputPinValue(GPIO_PORT_P1, GPIO_PIN1) == 1 && state){
                send_message(notPressed);
                state = false;
            }
                //Semaphore_post(semaphoreHandle);
                Task_sleep(100);
    }
}

Void clockHandler1(UArg arg)
{
    Task_yield();                   // To force a task switch if needed
}
